@startuml
!theme carbon-gray
abstract class User {
	-_firstName: String
	-_lastName: String
	-_hashedPassword: byte[]
	-_email: String
	-_phone: String
	-_address: String
	__
	+User (firstName: String, lastName: String, password: char[], email: String, phone: String, adress: String)
	+User (firstName: String, lastName: String, password: ArrayList<Integer>, salt: ArrayList<Integer>, email: String, phone: String, adress: String)
	#{abstract} changeView(): void
	+toString(): String
	+equals(o: Object): boolean
	+hashCode(): int
	-generateSalt(): byte[]
	..Getters..
	+getFirstName(): String
	+getLastName(): String
	+getEmail(): String
	+getPassword(): byte[]
	+getAddress(): String
	+getPhone(): String
	..Setters..
	+setFirstName(String firstName): User
	+setLastName(String lastName): User
	+setEmail (String email): User
	+setPassword(char[] oldPassword, char[] newPassword): User
	+setAddress (String adress): User
	+setPhone(String phone): User
}


class Patient extends User {
	db: FirebaseFirestore
	-_healthCardNumber: String
	+Patient (firstName: String, lastName: String, password: char[], email: String, phone: String, adress: String, healthCardNumber: String)
	+Patient (firstName: String, lastName: String, password: ArrayList<Integer>, salt: ArrayList<Integer>, email: String, phone: String, adress: String, healthCardNumber: String)
	+toString(): String
	+equals(o: Object): boolean
	+hashCode(): int
	..Getters..
	+getNewUserInformation(): HashMap<String, Object>
	+getRegisteredPatient: List<Map<String, Object>>
	+getHealthCardNumber(): String
	..Setters..
	+setHealthCardNumber(healthCardNumber: String): Patient
}
class Doctor extends User {
	-_employeeNumber: String
	-_specialties: ArrayList<Specialties>
	-newUserInformation: HashMap<String, Object> = new HashMap<>(9){read-only};
	+Doctor (firstName: String, lastName: String, password: char[], email: String, phone: String, adress: String, employeeNumber: String, specialties: ArrayList<Specialties>)
	+ Doctor (firstName: String, lastName: String, password: ArrayList<Integer>, salt: ArrayList<Integer>, email: String, phone: String, adress: String, employeeNumber: String, specialties: ArrayList<Specialties>))
	+toString(): String
	+equals(o: Object): boolean
	+hashCode(): int
	..Getters..
	+getEmpolyeeNumber(): String
	+getSpecialties(): ArrayList<Specialties>
	..Setters..
	+setEmployeeNumber(employeeNumber: String): Doctor
	+setSpecialties(specialties: ArrayList<Specialties>): Doctor
}

class Administrator extends User {
	-{static} PASSWORD: byte[] =  [24, 119, 82, 18, 72, 61, -68, -20, 6, 24, -96, -33, 41, 103, -43, -84]{read-only}
	-{static} SALT: byte[] = [-21, -20, 33, 117, 26, -112, -119, 124, -47, -58, 73, -106, 10, -5, -82, 18]{read-only}
	+Administrator()
	+changeView(Context currentContext): void
}
interface "ResponseListener<RequestStatus>" as ResponseListener_RequestStatus
ResponseListener_RequestStatus <|-- Login
class Login {
	+Login(email: String, password: char[], userType: UserType, currentContext: Context, LoginEventListener loginEventListener)
	+attemptLogin(): void
	-attemptLogin(email: String, password: char[], userType: UserType, currentContext: Context, user: User)
	+onSuccess(requestStatus: RequestStatus)
	+onFailure(error: Exception): void
	+{static}hashPassword(password: char[], salt: byte[]): byte[]
}
interface LoginEventListener {
	+loginResponse(LoginStatusCodes returnCode): void
}
interface ResponseListener<T> {
	onSuccess(data: T): void
	onFailure(e: Exception): void
}
class ArrayUtils() {
	+{static} packBytes(bytes: byte[]): ArrayList<Integer>
	+{static} unpackBytes(list: ArrayList<Integer>)
}
class Database {
	-db: FirebaseFirestore
	-{static} instance: Database
	-requestID: Long
	-signUpLock: Lock
	-Database()
	+{static}getInstance(): Database
	+addSignUpRequest(user: Patient)
	+addSignUpRequest(user: Doctor)
	+approveSignUpRequest(id: long)
	+rejectSignUpRequest(id: long)
	+getSignUpRequests(listener: ResponseListener<ArrayList<Request>>)
	+getPatients(listener: ResponseListener<ArrayList<Patient>>)
	+getDoctors(listener: ResponseListener<ArrayList<Doctor>>)
	+getPatient(email: String, listener: ResponseListener<Patient>)
	+getDoctor(email: String, listener: ResponseListener<Doctor>)
	+getRequestStatus(email: String, userType: UserType, listener: ResponseListener<RequestStatus>)
	-getStatus(email: String, userType: UserType): RequestStatus
	+checkUserIsInUsers(userType: UserType, checkToDo: ValidationType, fieldToValidate: String): boolean
	-checkEmailIsInUsers(userType: UserType, email: String): boolean
	-checkPhoneIsInUsers(userType: UserType, email: String): boolean
	-checkHealthCardNumberIsInUsers(healthCardNumber: String): boolean
	-checkEmployeeNumberIsInUsers(employeeNumber: String): boolean
	+checkUserIsInRequests(userType: UserType, checkToDo: ValidationType, fieldToValidate: String)
	-checkEmailIsInRequests(userType: UserType, email: String): Boolean
	-checkHealthCardNumberIsInRequests(healthCardNumber: String): boolean
	-checkEmployeeNumberIsInRequests(employeeNumber: String): boolean
	-checkPhoneIsInRequests(userType: UserType, email: String): boolean
	-getRequestStatusFromRequests(email: String): RequestStatus
	+sendEmail(user: User, status: RequestStatus): void
}
class Request {
	-id: long
	-userType: userType
	-doctor: Doctor
	-patient: Patient
	-status: RequestStatus
	--
	+Request()
	+Request(long id, Patient patient, RequestStatus status)
	+Request(long id, Doctor doctor, RequestStatus status)
	..Getters..
	+getID(): long
	+getStatus(): RequestStatus
	+getPatient(): Patient
	+getDoctor(): Doctor
	+getUserType: UserType
	+getEmail(): String
	+getPhoneNumber(): String
	+getHealthCardNumber: String
	+getEmpolyeeNumber: SALT
	+{static}getUserFromRequest(request: Request): User
}
class Validator {
	+{static}textFieldIsEmpty(stringField: String..): boolean
	+{static}textFieldsAreEmpty(fields: String...): boolean
	+{static}emailAddressIsValid(emailAddress: String, userType: UserType): ValidationTaskResult
	+{static}nameIsValid(): boolean
	+{static}passwordIsValid(): boolean
	+{static}phoneNumberIsValid(): boolean
	+{static}checkIfHealthCardNumberExists(healthCardNumber: String): boolean
	+{static}checkIfEmployeeNumberExists(employeeNumber: String): boolean
	+{static}checkIfPhoneNumberExists(phoneNumber: String, userType: UserType): boolean
}
enum ValidationTaskResult {
        INVALID_FORMAT,
        INVALID_DOMAIN,
        INVALID_LOCAL_EMAIL_ADDRESS,
        ATTRIBUTE_ALREADY_REGISTERED,
        ATTRIBUTE_IS_FREE_TO_USE,
        VALID,
        ERROR
}
enum ValidationType {
    EMAIL_ADDRESS,
    PHONE_NUMBER,
    HEALTH_CARD_NUMBER,
    EMPLOYEE_NUMBER
}
enum Specialties {
	FAMILY_MEDICINE,
	INTERNAL_MEDICINE,
	PEDIATRICS,
	OBSTETRICS,
	GYNECOLOGY
}
enum UserType {
	PATIENT,
	DOCTOR,
	ADMIN
}

enum LoginStatusCodes {
    SUCCESS,
    USER_DOES_NOT_EXIST,
    INCORRECT_PASSWORD,
	REQUEST_ERROR
}
enum RequestStatus {
    APPROVED,
    PENDING,
    REJECTED
}

Doctor "1" -- "1..*" Specialties : has
Doctor "1" -- "1" Database
Patient "1" -- "1" Database
Request "1" -- "1..*" Database
@enduml