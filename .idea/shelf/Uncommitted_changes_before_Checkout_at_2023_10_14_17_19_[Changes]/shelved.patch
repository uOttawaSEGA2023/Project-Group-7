Index: app/src/main/java/com/quantumSamurais/hams/patient/activities/PatientSignUpActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.quantumSamurais.hams.patient.activities;\r\n\r\nimport static com.quantumSamurais.hams.utils.Validator.emailAddressIsValid;\r\nimport static com.quantumSamurais.hams.utils.Validator.nameIsValid;\r\nimport static com.quantumSamurais.hams.utils.Validator.passwordIsValid;\r\nimport static com.quantumSamurais.hams.utils.Validator.phoneNumberIsValid;\r\nimport static com.quantumSamurais.hams.utils.Validator.textFieldIsEmpty;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Toast;\r\n\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.quantumSamurais.hams.LoginInteractiveMessage;\r\nimport com.quantumSamurais.hams.R;\r\nimport com.quantumSamurais.hams.login.LoginActivity;\r\nimport com.quantumSamurais.hams.patient.Patient;\r\nimport com.quantumSamurais.hams.user.UserType;\r\n\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\npublic class PatientSignUpActivity extends AppCompatActivity {\r\n    private EditText firstNameEditText, lastNameEditText, emailAddressEditText, passwordEditText, phoneNumberEditText, postalAddressEditText, healthCardNumberEditText;\r\n    private Button signUpButton;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.patient_register_form);\r\n\r\n        firstNameEditText = findViewById(R.id.firstNameSlot);\r\n        lastNameEditText = findViewById(R.id.lastNameSlot);\r\n        emailAddressEditText = findViewById(R.id.emailAddressSlot);\r\n        passwordEditText = findViewById(R.id.passwordSlot);\r\n        phoneNumberEditText = findViewById(R.id.phoneNumberSlot);\r\n        postalAddressEditText = findViewById(R.id.postalAddressSlot);\r\n        healthCardNumberEditText = findViewById(R.id.healthCardNumberSlot);\r\n        signUpButton = findViewById(R.id.formSignUpButton);\r\n\r\n        signUpButton.setOnClickListener(v -> {\r\n            // Get user input\r\n            String firstName = firstNameEditText.getText().toString().trim();\r\n            String lastName = lastNameEditText.getText().toString().trim();\r\n            String emailAddress = emailAddressEditText.getText().toString().trim();\r\n            String password = passwordEditText.getText().toString().trim();\r\n            String phoneNumber = phoneNumberEditText.getText().toString().trim();\r\n            String postalAddress = postalAddressEditText.getText().toString().trim();\r\n            String healthCardNumber = healthCardNumberEditText.getText().toString().trim();\r\n\r\n            //First make sure no field is empty\r\n            if (textFieldIsEmpty(firstName) || textFieldIsEmpty(lastName) || textFieldIsEmpty(emailAddress) || textFieldIsEmpty(password) || textFieldIsEmpty(phoneNumber) || textFieldIsEmpty(postalAddress) || textFieldIsEmpty(healthCardNumber)){\r\n                Toast.makeText(PatientSignUpActivity.this, \"Please make sure to fill all the fields.\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            //Validations Gauntlet\r\n            // Validate names\r\n            if (!(nameIsValid(firstName) && nameIsValid(lastName))) {\r\n                Toast.makeText(PatientSignUpActivity.this, \"Please make sure your name follows a human format (no numbers, spaces, etc.)\", Toast.LENGTH_LONG).show();\r\n                return;\r\n            }\r\n            //emailAddressIsValid throws errors due to be a wifi/threaded method, so we require a try/catch\r\n            try {\r\n                if (emailAddressIsValid(emailAddress) < 0) {\r\n                    if (emailAddressIsValid(emailAddress) == -1) {\r\n                        Toast.makeText(PatientSignUpActivity.this, \"This email address is not formatted like an email address.\", Toast.LENGTH_SHORT).show();\r\n                        return;\r\n\r\n                    } else if (emailAddressIsValid(emailAddress) == -2) {\r\n                        Toast.makeText(PatientSignUpActivity.this, \"Please ensure this email address' domain exists\", Toast.LENGTH_SHORT).show();\r\n                        return;\r\n\r\n                    }\r\n                    Toast.makeText(PatientSignUpActivity.this, \"Please ensure the localPart of your email address is correct, ensure there are no spaces.\", Toast.LENGTH_SHORT).show();\r\n                    return;\r\n                }\r\n            }\r\n            catch(ExecutionException e){\r\n                Toast.makeText(PatientSignUpActivity.this, \"Something went wrong during email's domain verification, please check your connection and try again.\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            catch(InterruptedException e){\r\n                Toast.makeText(PatientSignUpActivity.this, \"Something went wrong with the email address' verification thread, please wait a bit and try again.\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n\r\n            }\r\n            if (!passwordIsValid(password)){\r\n                Toast.makeText(PatientSignUpActivity.this, \"Password must contain at least 8 chars, one capital letter and one small letter, one number, and one special character.\", Toast.LENGTH_LONG).show();\r\n                return;\r\n            }\r\n            if (!phoneNumberIsValid(phoneNumber)){\r\n                Toast.makeText(PatientSignUpActivity.this, \"Please make sure your phone number contains exactly 10 numbers, and only numbers.\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n\r\n            //If we haven't returned yet, it means the verifiable inputs have been verified. So we can attempt registration.\r\n            Patient newUser = new Patient(firstName, lastName, password.toCharArray(), emailAddress, phoneNumber, postalAddress, healthCardNumber);\r\n\r\n            // Store the user data in the database\r\n            if (savedUser(newUser)) {\r\n                // Registration successful\r\n                Toast.makeText(PatientSignUpActivity.this, \"Registration successful\", Toast.LENGTH_SHORT).show();\r\n                // Switch to login\r\n                Intent login = new Intent(this, LoginActivity.class);\r\n                startActivity(login);\r\n            } else {\r\n                // Error while saving to the database\r\n                Toast.makeText(PatientSignUpActivity.this, \"Error occurred. Please try again.\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        }\r\n        );\r\n    }\r\n\r\n\r\n    private boolean savedUser(Patient newUser) {\r\n        List<Map<String, Object>> registeredUsers = Patient.getRegisteredPatients();\r\n        return registeredUsers.contains(newUser.getNewUserInformation());\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/quantumSamurais/hams/patient/activities/PatientSignUpActivity.java b/app/src/main/java/com/quantumSamurais/hams/patient/activities/PatientSignUpActivity.java
--- a/app/src/main/java/com/quantumSamurais/hams/patient/activities/PatientSignUpActivity.java	(revision 46dd7b20de8c3eccd416ab01fa09397621fc395a)
+++ b/app/src/main/java/com/quantumSamurais/hams/patient/activities/PatientSignUpActivity.java	(date 1697313429303)
@@ -20,6 +20,8 @@
 import com.quantumSamurais.hams.login.LoginActivity;
 import com.quantumSamurais.hams.patient.Patient;
 import com.quantumSamurais.hams.user.UserType;
+import com.quantumSamurais.hams.utils.Validator;
+import com.quantumSamurais.hams.utils.Validator.ValidationTaskResult;
 
 
 import java.util.List;
@@ -67,16 +69,17 @@
             }
             //emailAddressIsValid throws errors due to be a wifi/threaded method, so we require a try/catch
             try {
-                if (emailAddressIsValid(emailAddress) < 0) {
-                    if (emailAddressIsValid(emailAddress) == -1) {
-                        Toast.makeText(PatientSignUpActivity.this, "This email address is not formatted like an email address.", Toast.LENGTH_SHORT).show();
-                        return;
+                ValidationTaskResult emailValidationCheck = emailAddressIsValid(emailAddress);
+
+                if (emailValidationCheck == ValidationTaskResult.INVALID_FORMAT) {
+                    Toast.makeText(PatientSignUpActivity.this, "This email address is not formatted like an email address.", Toast.LENGTH_SHORT).show();
+                    return;
 
-                    } else if (emailAddressIsValid(emailAddress) == -2) {
-                        Toast.makeText(PatientSignUpActivity.this, "Please ensure this email address' domain exists", Toast.LENGTH_SHORT).show();
-                        return;
+                } else if (emailValidationCheck == ValidationTaskResult.INVALID_DOMAIN) {
+                    Toast.makeText(PatientSignUpActivity.this, "Please ensure this email address' domain exists", Toast.LENGTH_SHORT).show();
+                    return;
 
-                    }
+                } else if (emailValidationCheck ==  ValidationTaskResult.INVALID_LOCAL_EMAIL_ADDRESS){
                     Toast.makeText(PatientSignUpActivity.this, "Please ensure the localPart of your email address is correct, ensure there are no spaces.", Toast.LENGTH_SHORT).show();
                     return;
                 }
Index: app/src/main/java/com/quantumSamurais/hams/utils/Validator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.quantumSamurais.hams.utils;\r\n\r\nimport static java.net.InetAddress.getByName;\r\n\r\n\r\nimport android.os.AsyncTask;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport java.net.InetAddress;\r\nimport java.net.UnknownHostException;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\npublic final class Validator {\r\n    //Inner Class\r\n\r\n    /**\r\n     *\r\n     */\r\n    private static class DomainValidationTask extends AsyncTask<String, Void, Boolean> {\r\n\r\n        @Override\r\n        protected Boolean doInBackground(String... domains) {\r\n            if (domains.length == 0) {\r\n                return false; //No domains to validate\r\n            }\r\n            try {\r\n                for (int i = 0; i < domains.length; i++) {\r\n                    String domain = domains[i];\r\n                    InetAddress address = InetAddress.getByName(domain);\r\n                }\r\n                return true; // Domain is/are all valid.\r\n            } catch (UnknownHostException e) {\r\n                return false; // At least one domain is not valid.\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the string that was passed by user is empty.\r\n     *\r\n     * @param stringField: The string which we want to verify\r\n     * @return {@code true} if yes, and {@code false} if it is NOT an empty string.\r\n     */\r\n    public static boolean textFieldIsEmpty(String stringField) {\r\n        return (stringField == null || stringField.isEmpty());\r\n    }\r\n    public static boolean textFieldsAreEmpty(String ...fields) {\r\n        for(String i : fields) {\r\n            if(i == null || i.isEmpty()) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Validates an email address by first checking if the domain associated with it exists, and then\r\n     * checking if the local part has a suitable format (checked through regex)\r\n     *\r\n     * @param emailAddress: The email address to validate\r\n     * @return {@code -1} if the email is not formatted as an email, {@code -2} if the domain is invalid, {@code -3} if the localPart is invalid, {@code 1} if everything is fine.\r\n     */\r\n\r\n    public static int emailAddressIsValid(@NonNull String emailAddress) throws ExecutionException, InterruptedException {\r\n        //First check the email has a @\r\n        if (!emailAddress.contains(\"@\")) {\r\n            return -1;\r\n        }\r\n        //Split the email address\r\n        String[] splitEmail = emailAddress.split(\"@\");\r\n\r\n        //Check if the resulting string got a domain part to validate\r\n        boolean proceed = splitEmail.length == 2;\r\n\r\n        if (proceed) {\r\n            String localPart = splitEmail[0];\r\n            String domainPart = splitEmail[1];\r\n\r\n            // Create and execute the DomainValidationTask\r\n            DomainValidationTask validationTask = new DomainValidationTask();\r\n\r\n            Boolean domainIsValid;\r\n\r\n            domainIsValid = validationTask.execute(domainPart).get();\r\n\r\n\r\n            if (domainIsValid) {\r\n                if (!textFieldIsEmpty(localPart) && localPart.matches(\"^\\\\S+$\")) {\r\n                    return 1;\r\n                }\r\n                return -3;\r\n            }\r\n            return -2;\r\n\r\n\r\n        }\r\n        return -1;\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Validates a name to ensure it matches the regex pattern that would verify most names\r\n     * (Sorry Elon's son, not yours)\r\n     *\r\n     * @param name: The name to validate\r\n     * @return {@code true} if the string does match the pattern, {@code false} if not.\r\n     */\r\n    public static boolean nameIsValid(@NonNull String name) {\r\n        //Name is not valid, if contains non-alphabetic characters (sorry Elon's son)\r\n        return name.matches(\"^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$\");\r\n    }\r\n\r\n    public static boolean passwordIsValid(@NonNull String password) {\r\n        return password.matches(\"^(?=[^a-z]*[a-z])(?=[^A-Z]*[A-Z])(?=\\\\D*\\\\d)(?=[^!@#$%^&\\\\*]*[!@#$%^&\\\\**])[A-Za-z0-9!@#$%^&\\\\**]{8,}$\");\r\n    }\r\n\r\n    /**\r\n     * Validates a phone number to ensure it consists of exactly 10 digits (0-9).\r\n     *\r\n     * @param phoneNumber: The phone number to be validated.\r\n     * @return {@code true} if the phone number is valid (consists of exactly 10 digits), otherwise {@code false}.\r\n     * @throws NullPointerException if {@code phoneNumber} is {@code null}.\r\n     */\r\n    public static boolean phoneNumberIsValid(@NonNull String phoneNumber) {\r\n        return (phoneNumber.matches(\"[0-9]+\") && phoneNumber.length() == 10);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/quantumSamurais/hams/utils/Validator.java b/app/src/main/java/com/quantumSamurais/hams/utils/Validator.java
--- a/app/src/main/java/com/quantumSamurais/hams/utils/Validator.java	(revision 46dd7b20de8c3eccd416ab01fa09397621fc395a)
+++ b/app/src/main/java/com/quantumSamurais/hams/utils/Validator.java	(date 1697318235540)
@@ -1,5 +1,6 @@
 package com.quantumSamurais.hams.utils;
 
+import static com.quantumSamurais.hams.login.Login.db;
 import static java.net.InetAddress.getByName;
 
 
@@ -8,16 +9,33 @@
 
 import androidx.annotation.NonNull;
 
+import com.google.android.gms.tasks.Tasks;
+import com.google.firebase.firestore.FirebaseFirestore;
+import com.google.firebase.firestore.QueryDocumentSnapshot;
+import com.google.firebase.firestore.QuerySnapshot;
+import com.quantumSamurais.hams.user.UserType;
+
 import java.net.InetAddress;
 import java.net.UnknownHostException;
+import java.util.Map;
+import java.util.Objects;
 import java.util.concurrent.ExecutionException;
 
 public final class Validator {
-    //Inner Class
+    public class IsInDatabaseParams {
+        // at index 0          /  at index 1          / at index 2
+        // value to check     /   typeOfCheck        /  userType
+        // ex: a@gmail.com   /    EMAIL_ADDRESS      /   PATIENT
+        Object[] parameters = new Object[3];
+
+        IsInDatabaseParams(@NonNull String valueToCheck, ValidationType typeOfCheck, UserType userType) {
+            parameters[0] = valueToCheck;
+            parameters[1] = typeOfCheck;
+            parameters[2] = userType;
+        }
+    }
 
-    /**
-     *
-     */
+
     private static class DomainValidationTask extends AsyncTask<String, Void, Boolean> {
 
         @Override
@@ -37,6 +55,38 @@
         }
     }
 
+    private static class IsInDatabaseTask extends AsyncTask<String, Void, ValidationTaskResult> {
+        FirebaseFirestore db = FirebaseFirestore.getInstance();
+        QuerySnapshot snap;
+
+        @Override
+        protected ValidationTaskResult doInBackground(String... emailAddresses)    {
+        if (emailAddresses.length == 0) {
+            return ValidationTaskResult.INVALID_FORMAT; //No email
+        }
+
+        try {
+            Tasks.await(db.collection("users").document("software").collection("patients").get());
+        } catch (ExecutionException e) {
+            throw new RuntimeException(e);
+        } catch (InterruptedException e) {
+            throw new RuntimeException(e);
+        }
+
+        for (int i = 0; i < emailAddresses.length; i++) {
+            for (QueryDocumentSnapshot profile : snap) {
+                Map<String, Object> userData = profile.getData();
+                if (Objects.equals(userData.get("emailAddress"), emailAddresses[i])) {
+                    return ValidationTaskResult.ATTRIBUTE_ALREADY_REGISTERED;
+                }
+            }
+
+
+        }
+        return null;
+    }
+
+
     /**
      * Checks if the string that was passed by user is empty.
      *
@@ -46,9 +96,10 @@
     public static boolean textFieldIsEmpty(String stringField) {
         return (stringField == null || stringField.isEmpty());
     }
-    public static boolean textFieldsAreEmpty(String ...fields) {
-        for(String i : fields) {
-            if(i == null || i.isEmpty()) {
+
+    public static boolean textFieldsAreEmpty(String... fields) {
+        for (String i : fields) {
+            if (i == null || i.isEmpty()) {
                 return true;
             }
         }
@@ -60,13 +111,13 @@
      * checking if the local part has a suitable format (checked through regex)
      *
      * @param emailAddress: The email address to validate
-     * @return {@code -1} if the email is not formatted as an email, {@code -2} if the domain is invalid, {@code -3} if the localPart is invalid, {@code 1} if everything is fine.
+     * @return {@code INVALID_FORMAT} if the email is not formatted as an email, {@code INVALID_DOMAIN} if the domain is invalid, {@code INVALID_LOCAL_EMAIL_ADDRESS} if the localPart is invalid, {@code VALID} if everything is fine.
      */
 
-    public static int emailAddressIsValid(@NonNull String emailAddress) throws ExecutionException, InterruptedException {
+    public static ValidationTaskResult emailAddressIsValid(String emailAddress, UserType userType) throws ExecutionException, InterruptedException {
         //First check the email has a @
         if (!emailAddress.contains("@")) {
-            return -1;
+            return ValidationTaskResult.INVALID_FORMAT;
         }
         //Split the email address
         String[] splitEmail = emailAddress.split("@");
@@ -85,21 +136,22 @@
 
             domainIsValid = validationTask.execute(domainPart).get();
 
-
             if (domainIsValid) {
                 if (!textFieldIsEmpty(localPart) && localPart.matches("^\\S+$")) {
-                    return 1;
+                    IsInDatabaseTask emailIsInDatabase = new IsInDatabaseTask(new Validator.IsInDatabaseParams(emailAddress, ValidationType.EMAIL_ADDRESS, userType)).execute(new String[]{emailAddress}).get();
                 }
-                return -3;
+                return ValidationTaskResult.INVALID_LOCAL_EMAIL_ADDRESS;
             }
-            return -2;
+            return ValidationTaskResult.INVALID_DOMAIN;
 
 
         }
-        return -1;
+        return ValidationTaskResult.INVALID_FORMAT;
     }
 
+    private static void checkIfEmailExists(String emailAddress, UserType userType) {
 
+    }
 
 
     /**
@@ -130,10 +182,7 @@
     }
 
 
-
-
-
-    }
+}
 
 
 
Index: app/src/main/java/com/quantumSamurais/hams/utils/ValidationType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/quantumSamurais/hams/utils/ValidationType.java b/app/src/main/java/com/quantumSamurais/hams/utils/ValidationType.java
new file mode 100644
--- /dev/null	(date 1697316299609)
+++ b/app/src/main/java/com/quantumSamurais/hams/utils/ValidationType.java	(date 1697316299609)
@@ -0,0 +1,7 @@
+package com.quantumSamurais.hams.utils;
+
+public enum ValidationType {
+    EMAIL_ADDRESS,
+    HEALTH_CARD_NUMBER,
+    EMPLOYEE_ID
+}
Index: app/src/main/java/com/quantumSamurais/hams/doctor/activities/DoctorSignUpActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.quantumSamurais.hams.doctor.activities;\r\n\r\nimport static com.quantumSamurais.hams.utils.Validator.emailAddressIsValid;\r\nimport static com.quantumSamurais.hams.utils.Validator.nameIsValid;\r\nimport static com.quantumSamurais.hams.utils.Validator.passwordIsValid;\r\nimport static com.quantumSamurais.hams.utils.Validator.phoneNumberIsValid;\r\nimport static com.quantumSamurais.hams.utils.Validator.textFieldsAreEmpty;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.quantumSamurais.hams.LoginInteractiveMessage;\r\nimport com.quantumSamurais.hams.R;\r\nimport com.quantumSamurais.hams.doctor.Doctor;\r\nimport com.quantumSamurais.hams.doctor.Specialties;\r\nimport com.quantumSamurais.hams.doctor.adapters.CheckableItemAdapter;\r\nimport com.quantumSamurais.hams.login.LoginActivity;\r\nimport com.quantumSamurais.hams.user.User;\r\nimport com.quantumSamurais.hams.user.UserType;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.EnumSet;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\npublic class DoctorSignUpActivity extends AppCompatActivity {\r\n\r\n    private EditText  firstNameET, lastNameET, emailAddressET, passwordET, phoneNumberET, postalAddressET,employeeNumberET;\r\n\r\n    private RecyclerView specialtiesSelect;\r\n\r\n    private CheckableItemAdapter<Specialties> adapter;\r\n    private Button signUp;\r\n\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.doctor_register_form);\r\n        setup();\r\n        signUp.setOnClickListener(this::onSignUpClicked);\r\n    }\r\n\r\n    private void setup() {\r\n        firstNameET = findViewById(R.id.firstNameDoctorReg);\r\n        lastNameET = findViewById(R.id.lastNameDoctorReg);\r\n        emailAddressET = findViewById(R.id.emailAddressDoctorReg);\r\n        passwordET = findViewById(R.id.passwordDoctorReg);\r\n        phoneNumberET = findViewById(R.id.phoneNumberDoctorReg);\r\n        postalAddressET = findViewById(R.id.postalAddressDoctorReg);\r\n        employeeNumberET = findViewById(R.id.employeeNumberDoctorReg);\r\n        signUp = findViewById(R.id.signUpButtonDoctorReg);\r\n        specialtiesSelect = findViewById(R.id.specialtiesSelect);\r\n        // Setup RecyclerView\r\n        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this,LinearLayoutManager.VERTICAL,false);\r\n        adapter = new CheckableItemAdapter<>(this, EnumSet.allOf(Specialties.class));\r\n        specialtiesSelect.setLayoutManager(layoutManager);\r\n        specialtiesSelect.setAdapter(adapter);\r\n        int items = adapter.getItemCount();\r\n        Log.d(\"items\", Integer.toString(items));\r\n\r\n\r\n    }\r\n\r\n    private void onSignUpClicked(View view) {\r\n        String firstName = trimText(firstNameET);\r\n        String lastName = trimText(lastNameET);\r\n        String emailAddress = trimText(emailAddressET);\r\n        String password = trimText(passwordET);\r\n        String phoneNumber = trimText(phoneNumberET);\r\n        String postalAddress = trimText(postalAddressET);\r\n        String employeeNumber = trimText(employeeNumberET);\r\n        EnumSet<Specialties> specialties = adapter.getCheckedOptions(Specialties.class);\r\n        ArrayList<Specialties> specialtiesArrayList = new ArrayList<>(specialties);\r\n\r\n        if (textFieldsAreEmpty(firstName, lastName, emailAddress, password, phoneNumber, postalAddress, employeeNumber)) {\r\n            shortToast(\"Please make sure to fill all the fields.\");\r\n            return;\r\n        }\r\n        if (!nameIsValid(firstName) || !nameIsValid(lastName)) {\r\n            shortToast(\"Please make sure your name follows a human format (no numbers, spaces, etc.)\");\r\n            return;\r\n        }\r\n\r\n\r\n        try {\r\n            int validationResult = emailAddressIsValid(emailAddress);\r\n            if (validationResult < 0) {\r\n                if(validationResult == -1) {\r\n                    shortToast(\"This email address is not formatted like an email address.\");\r\n                }\r\n                else if (validationResult == -2) {\r\n                    shortToast(\"Please ensure this email address' domain exists\");\r\n                }\r\n                else {\r\n                shortToast(\"Please ensure the localPart of your email address is correct, ensure there are no spaces.\");\r\n                }\r\n                return;\r\n            }\r\n        } catch (ExecutionException e) {\r\n           shortToast(\"Something went wrong during email's domain verification, please check your connection and try again.\");\r\n            return;\r\n        } catch (InterruptedException e) {\r\n           shortToast(\"Something went wrong with the email address' verification thread, please wait a bit and try again.\");\r\n            return;\r\n        }\r\n        if (!passwordIsValid(password)) {\r\n            shortToast(\"Password must contain at least 8 chars, one capital letter and one small letter, one number, and one special character.\");\r\n            return;\r\n        }\r\n        if(!phoneNumberIsValid(phoneNumber)) {\r\n            shortToast(\"Please make sure your phone number contains exactly 10 numbers, and only numbers.\");\r\n            return;\r\n        }\r\n\r\n        Doctor newUser = new Doctor(firstName,lastName, password.toCharArray(),emailAddress,phoneNumber,postalAddress,employeeNumber, specialtiesArrayList);\r\n        if(User.registeredDoctors.contains(newUser.getNewUserInformation())) {\r\n            shortToast(\"Registration successful\");\r\n            // Switch to login\r\n            Intent login = new Intent(this, LoginActivity.class);\r\n            startActivity(login);\r\n        } else {\r\n            shortToast(\"An Error occurred please try again\");\r\n        }\r\n    }\r\n\r\n    private void shortToast(String text) {\r\n        Toast.makeText(DoctorSignUpActivity.this, text, Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    private String trimText(EditText e) {\r\n        return e.getText().toString().trim();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/quantumSamurais/hams/doctor/activities/DoctorSignUpActivity.java b/app/src/main/java/com/quantumSamurais/hams/doctor/activities/DoctorSignUpActivity.java
--- a/app/src/main/java/com/quantumSamurais/hams/doctor/activities/DoctorSignUpActivity.java	(revision 46dd7b20de8c3eccd416ab01fa09397621fc395a)
+++ b/app/src/main/java/com/quantumSamurais/hams/doctor/activities/DoctorSignUpActivity.java	(date 1697313878156)
@@ -26,6 +26,7 @@
 import com.quantumSamurais.hams.login.LoginActivity;
 import com.quantumSamurais.hams.user.User;
 import com.quantumSamurais.hams.user.UserType;
+import com.quantumSamurais.hams.utils.Validator;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -91,7 +92,7 @@
 
 
         try {
-            int validationResult = emailAddressIsValid(emailAddress);
+            Validator.ValidationTaskResult validationResult = emailAddressIsValid(emailAddress);
             if (validationResult < 0) {
                 if(validationResult == -1) {
                     shortToast("This email address is not formatted like an email address.");
Index: app/src/main/java/com/quantumSamurais/hams/utils/ValidationTaskResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/quantumSamurais/hams/utils/ValidationTaskResult.java b/app/src/main/java/com/quantumSamurais/hams/utils/ValidationTaskResult.java
new file mode 100644
--- /dev/null	(date 1697318235527)
+++ b/app/src/main/java/com/quantumSamurais/hams/utils/ValidationTaskResult.java	(date 1697318235527)
@@ -0,0 +1,11 @@
+package com.quantumSamurais.hams.utils;
+
+public enum ValidationTaskResult {
+        INVALID_FORMAT,
+        INVALID_DOMAIN,
+        INVALID_LOCAL_EMAIL_ADDRESS,
+        ATTRIBUTE_ALREADY_REGISTERED,
+        ATTRIBUTE_IS_FREE,
+        VALID
+
+}
