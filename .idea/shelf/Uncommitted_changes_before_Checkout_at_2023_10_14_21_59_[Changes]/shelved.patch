Index: app/src/main/java/com/quantumSamurais/hams/doctor/activities/DoctorSignUpActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.quantumSamurais.hams.doctor.activities;\r\n\r\nimport static com.quantumSamurais.hams.utils.ValidationTaskResult.ATTRIBUTE_ALREADY_REGISTERED;\r\nimport static com.quantumSamurais.hams.utils.Validator.checkIfEmployeeNumberExists;\r\nimport static com.quantumSamurais.hams.utils.Validator.checkIfPhoneNumberExists;\r\nimport static com.quantumSamurais.hams.utils.Validator.emailAddressIsValid;\r\nimport static com.quantumSamurais.hams.utils.Validator.nameIsValid;\r\nimport static com.quantumSamurais.hams.utils.Validator.passwordIsValid;\r\nimport static com.quantumSamurais.hams.utils.Validator.phoneNumberIsValid;\r\nimport static com.quantumSamurais.hams.utils.Validator.textFieldsAreEmpty;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.quantumSamurais.hams.R;\r\nimport com.quantumSamurais.hams.doctor.Doctor;\r\nimport com.quantumSamurais.hams.doctor.Specialties;\r\nimport com.quantumSamurais.hams.doctor.adapters.CheckableItemAdapter;\r\nimport com.quantumSamurais.hams.login.LoginActivity;\r\nimport com.quantumSamurais.hams.user.User;\r\nimport com.quantumSamurais.hams.user.UserType;\r\nimport com.quantumSamurais.hams.utils.ValidationTaskResult;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.EnumSet;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\npublic class DoctorSignUpActivity extends AppCompatActivity {\r\n\r\n    private EditText  firstNameET, lastNameET, emailAddressET, passwordET, phoneNumberET, postalAddressET,employeeNumberET;\r\n\r\n    private RecyclerView specialtiesSelect;\r\n\r\n    private CheckableItemAdapter<Specialties> adapter;\r\n    private Button signUp;\r\n\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.doctor_register_form);\r\n        setup();\r\n        signUp.setOnClickListener(this::onSignUpClicked);\r\n    }\r\n\r\n    private void setup() {\r\n        firstNameET = findViewById(R.id.firstNameDoctorReg);\r\n        lastNameET = findViewById(R.id.lastNameDoctorReg);\r\n        emailAddressET = findViewById(R.id.emailAddressDoctorReg);\r\n        passwordET = findViewById(R.id.passwordDoctorReg);\r\n        phoneNumberET = findViewById(R.id.phoneNumberDoctorReg);\r\n        postalAddressET = findViewById(R.id.postalAddressDoctorReg);\r\n        employeeNumberET = findViewById(R.id.employeeNumberDoctorReg);\r\n        signUp = findViewById(R.id.signUpButtonDoctorReg);\r\n        specialtiesSelect = findViewById(R.id.specialtiesSelect);\r\n        // Setup RecyclerView\r\n        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this,LinearLayoutManager.VERTICAL,false);\r\n        adapter = new CheckableItemAdapter<>(this, EnumSet.allOf(Specialties.class));\r\n        specialtiesSelect.setLayoutManager(layoutManager);\r\n        specialtiesSelect.setAdapter(adapter);\r\n    }\r\n\r\n    private void onSignUpClicked(View view) {\r\n        String firstName = trimText(firstNameET);\r\n        String lastName = trimText(lastNameET);\r\n        String emailAddress = trimText(emailAddressET);\r\n        String password = trimText(passwordET);\r\n        String phoneNumber = trimText(phoneNumberET);\r\n        String postalAddress = trimText(postalAddressET);\r\n        String employeeNumber = trimText(employeeNumberET);\r\n        EnumSet<Specialties> specialties = adapter.getCheckedOptions(Specialties.class);\r\n        ArrayList<Specialties> specialtiesArrayList = new ArrayList<>(specialties);\r\n\r\n        if (textFieldsAreEmpty(firstName, lastName, emailAddress, password, phoneNumber, postalAddress, employeeNumber)) {\r\n            shortToast(\"Please make sure to fill all the fields.\");\r\n            return;\r\n        }\r\n        if (!nameIsValid(firstName) || !nameIsValid(lastName)) {\r\n            shortToast(\"Please make sure your name follows a human format (no numbers, spaces, etc.)\");\r\n            return;\r\n        }\r\n\r\n\r\n        try {\r\n            ValidationTaskResult emailAddressCheckResult = emailAddressIsValid(emailAddress, UserType.DOCTOR);\r\n\r\n            if(emailAddressCheckResult == ValidationTaskResult.INVALID_FORMAT) {\r\n                shortToast(\"This email address is not formatted like an email address.\");\r\n            }\r\n            else if (emailAddressCheckResult == ValidationTaskResult.INVALID_DOMAIN) {\r\n                shortToast(\"Please ensure this email address' domain exists\");\r\n            }\r\n            else if (emailAddressCheckResult == ValidationTaskResult.INVALID_LOCAL_EMAIL_ADDRESS) {\r\n                shortToast(\"Please ensure the localPart of your email address is correct, ensure there are no spaces.\");\r\n            }\r\n            else if (emailAddressCheckResult == ATTRIBUTE_ALREADY_REGISTERED) {\r\n                shortToast(\"This email address is already in use. Try to sign in instead.\");\r\n            }\r\n        } catch (ExecutionException e) {\r\n           shortToast(\"Something went wrong during email's domain verification, please check your connection and try again.\");\r\n            return;\r\n        } catch (InterruptedException e) {\r\n           shortToast(\"Something went wrong with the email address' verification thread, please wait a bit and try again.\");\r\n            return;\r\n        }\r\n        if (!passwordIsValid(password)) {\r\n            shortToast(\"Password must contain at least 8 chars, one capital letter and one small letter, one number, and one special character.\");\r\n            return;\r\n        }\r\n        if(!phoneNumberIsValid(phoneNumber)) {\r\n            shortToast(\"Please make sure your phone number contains exactly 10 numbers, and only numbers.\");\r\n            return;\r\n        }\r\n        boolean phoneNumberIsInDatabase = true;//We assume it's in, to block registration if it can't be verified\r\n        try {\r\n            phoneNumberIsInDatabase = checkIfPhoneNumberExists(phoneNumber, UserType.DOCTOR) == ATTRIBUTE_ALREADY_REGISTERED;\r\n        } catch (ExecutionException e) {\r\n            Log.d(\"phoneNumberValidation\", \"ExecutionException occurred: \" + e.getCause());\r\n            shortToast(\"Something seems to have went wrong during phone number validation, please try again.\");\r\n            return;\r\n        } catch (InterruptedException e) {\r\n            Log.d(\"phoneNumberValidation\", \"InterruptedException occurred: \" + e.getCause());\r\n            shortToast(\"Something seems to have went wrong during phone number validation, please try again.\");\r\n            return;\r\n        }\r\n        if (phoneNumberIsInDatabase){\r\n            shortToast(\"This phone number appears to already be in the database.\");\r\n            return;\r\n        }\r\n        boolean employeeNumberIsInDatabase = true;//We assume it's in, to block registration if it can't be verified\r\n        try {\r\n            employeeNumberIsInDatabase = checkIfEmployeeNumberExists(employeeNumber) == ATTRIBUTE_ALREADY_REGISTERED;\r\n        } catch (ExecutionException e) {\r\n            Log.d(\"employeeNumberValidation\", \"ExecutionException occurred: \" + e.getCause());\r\n            shortToast(\"Something seems to have went wrong during employee number validation, please try again.\");\r\n            return;\r\n        } catch (InterruptedException e) {\r\n            Log.d(\"employeeNumberValidation\", \"InterruptedException occurred: \" + e.getCause());\r\n            shortToast(\"Something seems to have went wrong during employee number validation, please try again.\");\r\n            return;\r\n        }\r\n        if (employeeNumberIsInDatabase){\r\n            shortToast(\"This employee number appears to already be registered. Please try signing in instead.\");\r\n            return;\r\n        }\r\n        if(specialtiesArrayList.size() < 1) {\r\n            shortToast(\"Please select one or more specialties.\");\r\n            return;\r\n        }\r\n\r\n        Doctor newUser = new Doctor(firstName,lastName, password.toCharArray(),emailAddress,phoneNumber,postalAddress,employeeNumber, specialtiesArrayList);\r\n        if(User.registeredDoctors.contains(newUser.getNewUserInformation())) {\r\n            shortToast(\"Registration successful\");\r\n            // Switch to login\r\n            Intent login = new Intent(this, LoginActivity.class);\r\n            startActivity(login);\r\n            finish();\r\n        } else {\r\n            shortToast(\"An Error occurred please try again\");\r\n        }\r\n    }\r\n\r\n    private void shortToast(String text) {\r\n        Toast.makeText(DoctorSignUpActivity.this, text, Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    private String trimText(EditText e) {\r\n        return e.getText().toString().trim();\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/app/src/main/java/com/quantumSamurais/hams/doctor/activities/DoctorSignUpActivity.java b/app/src/main/java/com/quantumSamurais/hams/doctor/activities/DoctorSignUpActivity.java
--- a/app/src/main/java/com/quantumSamurais/hams/doctor/activities/DoctorSignUpActivity.java	
+++ b/app/src/main/java/com/quantumSamurais/hams/doctor/activities/DoctorSignUpActivity.java	
@@ -11,6 +11,7 @@
 
 import android.content.Intent;
 import android.os.Bundle;
+import android.util.Log;
 import android.view.View;
 import android.widget.Button;
 import android.widget.EditText;
